AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  FunctionName:
    Type: String
    Default: LastKeypair
  FunctionKmsAuthName:
    Type: String
    Default: LastKeypair
  KeyAliasName:
    Type: String
    Default: alias/LastKeypair
  PstoreCAKeyBytesName:
    Type: String
  S3Bucket:
    Type: String
  S3Key:
    Type: String
  S3ObjectVersion:
    Type: String
Resources:
  Key:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-policy
        Statement:
          - Sid: Default
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/KMSAdminRole
#              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"
          - Sid: KmsDescribe
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:DescribeKey
            Resource: "*"
          - Sid: KmsAuth
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:Encrypt
            Resource: "*"
            Condition:
              StringEquals:
                kms:EncryptionContext:to:
                  - !Ref FunctionKmsAuthName
                kms:EncryptionContext:type: user
                kms:EncryptionContext:from: "${aws:username}"
                kms:EncryptionContext:account: "${kms:CallerAccount}"
#              Bool:
#                aws:MultiFactorAuthPresent: true
          - Sid: KmsLambdaAuth
            Effect: Allow
            Principal:
              AWS: !GetAtt LambdaRole.Arn
            Action: kms:Decrypt
            Resource: "*"
            Condition:
              StringEquals:
                kms:EncryptionContext:to:
                  - !Ref FunctionKmsAuthName
  KeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      TargetKeyId: !Ref Key
      AliasName: !Ref KeyAliasName
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Handler: handler.Handle
      FunctionName: !Ref FunctionName
      Role: !GetAtt LambdaRole.Arn
      Runtime: python2.7
      Timeout: 60
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
        S3ObjectVersion: !Ref S3ObjectVersion
      Environment:
        Variables:
          KMS_KEY_ID: !GetAtt Key.Arn
          KMS_TOKEN_IDENTITY: !Ref FunctionKmsAuthName
          VALIDITY_DURATION: 900
          PSTORE_CA_KEY_BYTES: !Ref PstoreCAKeyBytesName
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies: []
  Policy: # needed to avoid circular dependency between function, role and key
    Type: AWS::IAM::Policy
    Properties:
      Roles: [!Ref LambdaRole]
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action: ssm:GetParameters
            Resource: "*"
          - Effect: Allow
            Action: kms:Decrypt
            Resource: "*"
          - Effect: Allow
            Action: kms:Describe*
            Resource: !GetAtt Key.Arn
Outputs:
  FunctionArn:
    Value: !GetAtt Function.Arn
  KeyArn:
    Value: !GetAtt Key.Arn
